var tipuesearch = {"pages": [{'title': 'Codespaces', 'text': 'https://sturdy-space-journey-7v94wvw5666r3pq45-8000.app.github.dev/content/index.html \n', 'tags': '', 'url': 'Codespaces.html'}, {'title': 'W11-12', 'text': '所有學員需將分組的小組組別名稱(g4)新增至評分網站中的，為置於專案目錄下，之後將每位學員的關於本課程內容心得，新增至各組別下的目錄。 \n 這個過程中的困難點就是當多人在同時上傳(push)時，我們要如何應對。 \n 慢慢等人上傳後自己再上傳顯然是不合效率，所以需以課程所學來應對衝突問題。 \n 這裡就是需要利用 分支 處理衝突問題，雖然在上傳時如果當下自己的版本不是最新的，一樣需要將最新的版本git pull下來，然後進入動態網站進行衝突/合併，解決完後才能夠git push上去。 \n 分支：就是在當下的版本的另一條屬於自己的版本，比如說是原本一條的河流，突然變成兩條(甚至以上)，他們在本質上是屬於同一支源流，但每個分支出來會呈現的形式都是不同，最終都會匯聚至大海，而大海就是我們衝突裡的主流，每個人在自己的分支裡做自己想做的，最後要統整合併為一個主流，將每次上傳時都可能遇到的處理衝突問題次數降低。 \n ------------------------------------------------------------------------------------------------- \n 1. 開始複習加深前幾周所教學內容 \n 2. 評分網站在 git pull 處理要點 \n 如果自己不是最新版本，在pull後內容會顯示新增 修改的內容 \n WSGIserver( Web Server Gateway Interface )： 具有高效、易於使用和可擴展性等特點，是 Python 中用於定義 Web 應用程序與 Web 服務器之間通信的標準界面。( 參考 ) \n 3. 導師心得評語，修改評分網站中個人心得 \n 4. 提到學校網站利用 php ( P HP:\xa0 H ypertext\xa0 P reprocessor )所編寫，提到課程內容進階的關於學校網站排課系統 \n 5. 安裝Claude，AI程式聊天 \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt \xa0 動態頁面超文件). \n practice_html.txt \xa0 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 \xa0 class \xa0 後, 在範例導入時透過 \xa0 instance \xa0 引用.', 'tags': '', 'url': 'W11-12.html'}, {'title': 'W10', 'text': '以replit來維護新的分組倉儲，需要 應對問題為r eplit的.shh協定無法供免費使用者使用，已經透過github系統設定，現在可以直接在replit進行分組維護， \n replit目前只剩下對於使用者的 總資料儲存量 (10G)限制，當資源存取超過上限時，需要回到github下的對應倉儲帳號進行對應手段。 \n 新的分組專案網站： https://github.com/mdewcm2024/1astud-site \n (需在teams留言字串進行加入) \n', 'tags': '', 'url': 'W10.html'}, {'title': 'W7', 'text': '1 . 影片嵌入 網站方法。 \n 以超連結配合個人網站內的Source code 將影片複製後的超連結貼上，連結內有預設影片邊界 來源拉取等，除非想有特別需要調整，一般基本只要將其貼上即可。 \n', 'tags': '', 'url': 'W7.html'}, {'title': 'W5', 'text': '事先預習上課 可能 會講解內容，了解 iframe 是什麼和 相關應用 。 \n 內容會以iframe來插入前幾周的教學影片，並摘要各影片內容。 \n --------------------------------------------------------------------------- \n 1.Replit分組平台倉儲設定。 \n \n 2.使用 可攜檔 裡的 Putty-solvespace.exe ( STL )，零件檢視方法。 \n \n 3.使用近端可攜程式，維護更新自己及分組倉儲。 \n \n 參考實作教學影片請到 youtube \n', 'tags': '', 'url': 'W5.html'}, {'title': 'W3', 'text': '在 WCM第三週 教學內容，整理重點。(都有放相關或參照連結) \n 1.關於 git常用 指。 \n 2.利用 Wink 建立操作影片。( 安裝下載檔 ) \n 3.如何使用 submoduie 來創建個人子模組。(導師操作觀念 影片 ) \n 4.說明如何使用replit維護網站。 \n', 'tags': '', 'url': 'W3.html'}, {'title': 'W9', 'text': '最近我開始意識到，人工智慧（AI）工具已經深深地融入了我的生活，不僅提高了我的效率，還幫助我解決了許多問題。 \n 首先，AI工具在提高效率方面給我帶來了明顯的好處。比如，我經常使用智能手機上的智能助手來提醒我行程、查詢資訊，甚至解答我各種疑問。這幫助我節省了大量的時間，讓我更加專注於工作和生活中更重要的事情上。 \n 其次，AI工具也在解決問題方面給了我很大的幫助。最明顯的例子就是在學習和工作中。我經常使用自然語言處理（NLP）工具來幫助我理解複雜的文章或文獻，進行快速的信息查詢和摘要生成。這大大提高了我的學習效率，幫助我更好地應對工作中的挑戰。 \n 此外，AI工具還在許多其他方面給了我幫助。比如，在健康方面，我通過智能手環上的健康監測功能來記錄我的運動情況和睡眠狀態，幫助我更好地管理我的身體健康。在旅行方面，我通常使用智能導航應用來規劃路線和尋找景點，讓我的旅行更加順利和愉快。 \n 總的來說，AI工具已經成為我生活中不可或缺的一部分，從提高效率到解決問題，它們為我帶來了許多便利和好處。我相信隨著技術的不斷發展和進步，AI工具將會在未來帶給我們更多的驚喜和改變。 \n 在了解什麼是 AI的過程當中，我查到了AI較類似背後有一個大型數據庫，每分每秒都在自我學習、自我提升所以只要我們丟問題給AI，只要是在他的資料庫裡的，他都能夠回答得出來，所以我認為我也要向AI學習，自我成長、自我提升。 \n', 'tags': '', 'url': 'W9.html'}, {'title': 'W4', 'text': '我最近打造了自己的個人網站，想分享一下我的心得。首先，我用了GitHub倉儲管理網站內容，這樣就能隨時追蹤內容的改版歷程，也方便與團隊合作。然後，我利用GitHub Pages建立了網站，這樣我就無需擔心伺服器問題，網站能自動更新。為了更輕鬆編輯內容，我開發了一個網頁編輯系統，讓我能快速編輯和管理網站內容。最後，我將網站的啟動網址設置為外部IP，這樣無論身在何處，都能輕鬆編輯我的網站。總的來說，這次打造網站的過程讓我更了解了網站開發，也提高了效率，希望能繼續完善我的網站，分享更多有價值的內容。 \n 本周內容： \n 1. 複習 W3 上課內容。 \n 2. Replit靜態網站檢視，下載 main2.txt 和 static.txt 取得main2.py和static.py，以便執行python3 main2.py\xa0就完成了。 \n 3. 使用replit Codespaces Gitpod三種網頁維護 執行動態和靜態網站和設定存取權。 \n 4. 使用 Replit 分組網站建立權限，因為無法幫定多人以上的倉儲帳號，所以需要成員們自行在/home/runner/.ssh\xa0目錄下建立\xa0id_rsa\xa0與\xa0config。(.ssh-keygen) \n 5. 先下載 miktex-portable.7z ，期中 期末時需要用 LaTeX 建立各組的報告， \n 6. 需將以下資料做統整： \n https://github.com/git-guides \n https://git-scm.com/book/zh-tw/v2 \n https://git-scm.com/book/zh/v2 \n A Tutorial for GitHub.pdf \n github學習資源 \n 統整結果請按 這裡 。 \n', 'tags': '', 'url': 'W4.html'}, {'title': 'W8', 'text': 'wcm2024 1a w8 從教育的本質看課程內容 \n 問chatgpt:請問甚麼是教育的本質? \n 答: \n 教育的本質是一個多層面的概念，涉及到知識、價值觀、技能和社會化等多個方面。總的來說，教育的本質是通過各種形式的學習和指導來促進個人的全面發展和成長。 \n 1. **知識的傳遞與掌握：** 教育旨在將知識傳授給學生，使他們能夠理解和應用這些知識。這包括學習語言、數學、科學、歷史、文化等學科知識。 \n 2. **價值觀的塑造：** 教育也扮演著塑造個人價值觀和道德觀念的重要角色。通過教育，人們學習社會準則、尊重他人、責任感等價值觀。 \n 3. **技能的培養：** 教育提供了學習和發展各種技能的機會，包括認知技能（如思考、分析、解決問題）、社交技能（如合作、溝通）、實踐技能（如手工藝、運動）等。 \n 4. **社會化和個人成長：** 教育不僅僅是在學校或課堂上進行的，它還涉及到社會環境中的各種學習和互動。通過與他人的交流和合作，個人在社會化過程中成長，學會適應和融入社會。 \n 總的來說，教育的本質是通過知識、價值觀、技能和社會化的綜合作用，幫助個人實現全面的成長和發展，從而更好地適應和貢獻於社會。 \n 問:那對大學教育的本質呢? \n 答: \n 大學教育的本質在某種程度上延續了教育的一般本質，但也有其特定的特點和目標。以下是大學教育的本質： \n 1. **知識的深度和廣度：** 大學教育旨在提供更深入和更廣泛的學術知識，並培養學生的批判性思維和問題解決能力。這包括專業知識、學科理論、研究方法等方面的學習。 \n 2. **專業技能的培養：** 大學教育不僅關注學科知識，還強調培養學生在特定領域的專業技能。這些技能可能包括研究能力、創新能力、溝通能力、領導能力等，這些能力對於學生未來的職業發展至關重要。 \n 3. **思想和價值觀的塑造：** 大學教育也致力於塑造學生的思想、價值觀和道德觀念。通過學術研究、社會實踐和校園文化等活動，大學教育有助於學生形成獨立思考、社會責任感和多元文化意識。 \n 4. **學術自由和創新：** 大學教育強調學術自由和創新，鼓勵學生探索新的思想和理論，開展獨立研究，並在學術領域做出貢獻。 \n 5. **生涯規劃和職業發展：** 大學教育不僅僅是為了知識和技能的獲取，還包括幫助學生進行生涯規劃和職業發展。大學通常提供職業指導、實習機會和就業服務，以幫助學生順利過渡到職業生涯。 \n 總的來說，大學教育的本質是提供高等教育，通過深入的學術研究和專業培訓，培養學生的學術能力、專業素養和社會責任感，以滿足他們在學術、職業和社會生活中的需求。 \n', 'tags': '', 'url': 'W8.html'}, {'title': 'W6', 'text': '完成課程實作操作： \n 1. 根據自己專業： \n \xa0 \xa01-1.)說明 git 的使用和與 ChatGPT 的對話 \n \xa0 \xa01-2.)內容需含git發展歷史 \n \xa0 \xa01-3.)創作人的履歷 \n \xa0 \xa01-4.)一般相同專業人士如何利用git解決內容管理問題？ \n 2. 如果想在Windows實際使用 demo git client 與 git server ，該如何進行？ \n 3. 練習git init到git push，個人自己建立倉儲分支環境練習上傳推送，並處理合併問題。 \n', 'tags': '', 'url': 'W6.html'}, {'title': 'Git 歷史與希望解決的問題', 'text': '問題: 請簡述一下 Git 的發展歷史, 以及當時的背景如何? Git 想要解決甚麼問題? \n ChatGPT 回答: \n Git 是由 Linus Torvalds 在 2005 年開始開發的分散式版本控制系統。在此之前，像 CVS 和 Subversion 等集中式版本控制系統存在著一些問題，比如需要與中央存儲庫保持連接、分支和合併操作複雜等。在 Linux 核心程式開發過程中，Torvalds 和其他開發者開始感受到集中式版本控制系統的種種限制和不便，這促使他開始開發一個更適合分散式開發的工具。 \n Git 的目標是解決集中式版本控制系統的一些瓶頸，包括： \n \n 性能問題：集中式版本控制系統在大型專案中操作效率低，尤其是在提交和合併時。 \n 分支和合併操作的複雜性：在集中式系統中，分支和合併操作可能會變得耗時且複雜，過程中容易出現錯誤。 \n 依賴中央存儲庫：集中式系統需要即時與資料伺服器連線，一旦斷線或伺服器故障，可能會導致開發過程中的中斷。 \n \n 在這些問題的背後，是軟體開發過程的變化和複雜性增加。隨著項目變得越來越大，開發團隊變得分散，需要更靈活和高效率的工具來管理代碼。Git 的分散式架構允許開發人員在沒有連接到中央伺服器的情況下進行本地端操作，並且提供了高效的分支和合併機制，從而更有效滿足了協同需求。 \n 因此，Git 的發展是在不斷變化和擴大的軟體開發生態系統中的一個自然回應，旨在解決集中式版本控制系統所遇到的種種挑戰，並為開發人員提供更好的工具和流程。 \n 再問: 集中式版本控制系統為何在提交與合併上有性能問題? \n ChatGPT 回答: \n 集中式版本控制系統在提交和合併上可能會遇到性能問題，主要是由於以下幾個原因： \n \n \n 單一伺服器負載：在集中式版本控制系統中，所有的提交和合併操作都需要與中央伺服器進行連線。當開發人員數量增加，或者在大型項目中進行大量提交和合併操作時，這個中央伺服器可能會成為性能瓶頸，導致提交和合併操作的速度變慢。 \n \n \n 網路延遲：因為提交和合併操作需要與中央伺服器進行連線，因此網路延遲也會影響操作的速度。特別是當開發人員分佈在不同的地理位置時，距離和網路品質都可能擴大延遲。 \n \n \n 資料傳輸量：提交和合併操作可能涉及大量的資料傳輸，尤其是當提交或合併的檔案很大或者進行多次修改時。這些大量的資料傳輸需要消耗時間與頻寬，進一步影響操作的性能。 \n \n \n 鎖定操作：有些集中式版本控制系統在提交和合併時可能會對文件或資料夾進行鎖定，以避免同時進行衝突的操作。這種鎖定操作可能會導致等待時間增加，特別是在多人同時進行操作的情況下。 \n \n \n 因此，集中式版本控制系統的性能問題主要是由於其架構設計所導致，即所有操作都必須通過中央伺服器進行。因而限制了系統的擴展性和彈性，特別是在大型或分散式團隊中。 \n 再問: 為何使用 Git 沒有單一伺服器負載問題? \n ChatGPT 回答: \n 使用 Git 沒有單一伺服器負載問題的主要原因是 Git 的分散式架構。在 Git 中，每一位開發人員都擁有一個完整的本地儲存庫（repository），這使得提交和合併操作不需要依賴於單一的中央伺服器。如此一來，就不會出現單一伺服器負載問題。 \n 換言之，當開發人員在本地進行提交時，各協同人員只需將變更提交到自己的本地儲存庫中，而不是向中央伺服器提交。使得提交操作的速度不再受到中央伺服器的限制，而是受到本地計算機的性能限制，一般情況下會比提交到單一伺服器的執行速度快上許多。 \n 當需要與其他開發人員共享變更時，Git 提供了分支和合併的機制，開發人員可以在本地進行分支和合併操作，而不需要直接與中央伺服器連線。使得提交和合併操作可以在本地進行，不受網路延遲和頻寬限制，從而更加快速並提高協同效率。 \n 另外，即使在多人協作的情況下，由於每個開發人員都有自己的本地儲存庫，這些操作可以同步進行，而不會互相干擾或造成壓力集中在單一伺服器上。 \n 因此，Git 的分散式架構使得提交和合併操作不再依賴於單一的中央伺服器，從而消除了單一伺服器負載問題，提高了系統的性能與彈性。 \n', 'tags': '', 'url': 'Git 歷史與希望解決的問題.html'}, {'title': 'Git 如何解決產品設計問題', 'text': '問題: 身為產品開發人員, 使用的是商用封閉的 CAD 套件, 該如何使用 Git 來提升工作效率? \n ChatGPT 回答: \n 即使使用商用封閉的 CAD 套件，仍然可以使用 Git 來提升工作效率。以下是一些使用 Git 的方式： \n \n \n 版本控制: 使用 Git 對 CAD 項目進行版本控制，可以跟蹤每個版本的變更，並輕鬆地回溯到先前的版本。這對於保留歷史記錄、管理修改和恢復意外更改非常有用。 \n \n \n 分支管理: 在 Git 中使用分支來進行不同功能或版本的開發。你可以在不同的分支上同時進行不同的實驗和開發工作，而不會影響主要版本的開發。 \n \n \n 協作與共享: 透過 Git，團隊成員可以輕鬆地共享各自的工作成果，進行協作開發。每個人可以在自己的分支上工作，然後通過合併請求（pull request）將修改合併到主分支中。 \n \n \n 程式審查: 利用 Git 的分支和合併功能進行程式審查。團隊成員可以在專門的分支上提交各自編寫的程式變更，然後其他成員可以查看這些變更，提供意見和建議，最終通過合併到主分支中。 \n \n \n 自動化流程: 使用 Git 配合持續集成（CI）和持續部署（CD）工具，自動化 CAD 項目的測試、構建和部署流程。這樣可以節省時間並降低錯誤，同時確保項目的品質和穩定性。 \n \n \n 文檔和問題追蹤: 將 CAD 專案的文檔和問題追蹤整合到 Git 庫中，以便於跟蹤和管理。例如: 可以使用 Git 提供的 Wiki 功能來撰寫文檔，並使用 Issue 跟蹤功能來追蹤問題和任務。 \n \n \n 因此，即使使用商用封閉的 CAD 套件，Git 仍然可以成為提升工作效率的強大工具，幫助團隊更好地協作、管理和追蹤 CAD 開發專案。 \n 再問: 可是商用 CAD 採用 binary 格式的零件檔案, 在協同產品設計流程中, 該如何使用 Git 提升協同效能? \n ChatGPT 回答: \n 即使 CAD 文件是以 binary 格式保存的，你仍然可以使用 Git 來提升協同效能。以下是一些方法： \n \n \n 使用 LFS（Large File Storage）: Git LFS 是一個 Git 擴增模組，專門用於管理大型文件，包括 CAD 文件等二進制文件。透過 Git LFS，可以將大型 CAD 文件存儲在單獨的存儲庫中，而不會將它們放在 Git 存儲庫中，從而減少存儲庫大小和傳輸時間。 \n \n \n 拆分項目: 將 CAD 項目拆分為更小的部分，每個部分都是可獨立開發和測試的。這樣可以降低對於 binary 文件的變更衝突，並使得協同開發更加順暢。 \n \n \n 定期同步: 要求團隊成員定期將他們的工作同步到 Git 存儲庫中，以便及時發現和解決衝突。透過定期同步，可以最大程度地減少衝突和重複工作。 \n \n \n 使用分支: 在 Git 中使用分支來進行不同功能或版本的開發。每個團隊成員可以在自己的分支上工作，而不會影響主要的生產環境。這樣可以提高彈性，同時減少對於 binary 文件的同時修改。 \n \n \n 程式審查: 使用 Git 的分支和合併功能進行程式審查。每個成員在完成工作後，可以提交程式變更到自己的分支，然後發起合併請求。其他成員可以查看這些變更，提供意見和建議，確保程式的品質和穩定性。 \n \n \n 文件管理: 使用 Git 存儲庫中的 Wiki 功能來管理 CAD 文件的相關文檔，包括設計文檔、變更日誌等。這樣可以使得團隊成員更容易地找到並理解 CAD 文件的相關訊息。 \n \n \n 因此，即使 CAD 文件是以 binary 格式保存的，仍然可以通過合理使用 Git 和相應的工具來提升協同效能，降低衝突和重複工作，從而更加高效地進行協同產品設計流程。 \n 再問: 若設計流程採用 Siemens NX 設計零組件, 若將每一個零組件的設計過程採 NXOpen Python 程式存檔, 並且透過設計參數進行零組件調控, 就採用 Git 分散式版本管理系統上, 會比直接使用 binary 格式更有效率嗎? \n ChatGPT 回答: \n 在將每個零組件的設計過程以 NXOpen Python 程式存檔的情況下，使用 Git 分散式版本管理系統相比直接使用 binary 格式可能會更有效率。這主要是因為： \n \n \n 可讀性和可比較性：使用 NXOpen Python 程式存檔可以使得零組件的設計過程更具有可讀性和可比較性。相比於 binary 格式，Python 程式碼可以被版本控制系統更好地管理，使得團隊成員可以更容易地查看、比較和理解每個零組件的設計過程。 \n \n \n 易於跟蹤和管理：Python 程式存檔可以更輕鬆地跟蹤和管理設計過程中的變更。Git 可以記錄每次提交的修改，包括添加、刪除和修改的程式碼行數，從而使得團隊可以清楚地了解每個零組件的設計歷史和演變過程。 \n \n \n 設計參數的調控：使用 Python 程式存檔可以更靈活地調控零組件的設計參數。可以使用程式碼來自動化設計過程，並且通過修改參數來調整零組件的性能和外觀，從而更有效地進行重複性流程設計以及最佳化。 \n \n \n 協同開發與程式審查：與 binary 格式相比，Python 程式存檔更適合進行協同開發與程式碼的審查。團隊成員可以在版本控制系統中查看並評論每個零組件的設計程式碼，提供意見和建議，從而確保設計的品質和一致性。 \n \n \n 因此，使用 NXOpen Python 程式存檔並結合 Git 分散式版本管理系統可以更有效地管理和控制零組件的設計過程，提高團隊的協同效率和設計品質。 \n', 'tags': '', 'url': 'Git 如何解決產品設計問題.html'}, {'title': 'About', 'text': '網頁:  \xa0 https://41223150.github.io/wcm2024/ \n 網誌: 請填入目前網站所在的 URL/blog,  \xa0 https://41223150.github.io/wcm2024/ \n 簡報: 請填入目前網站所在的 URL/reveal,  https://mde.tw/cmsimde_site/reveal \n 倉儲: https://github.com/41223150/wcm2024/settings/pages \n \n 本 cmsimde 網際內容管理系統的對應 Template 倉儲: \n https://github.com/mdecycu/cmsimde_site \n 此 Template 將 cmsimde 作為子目錄而非子模組, 使用者可以依照需求自行修改 \n 倉儲對應網站:  https://mde.tw/cmsimde_site \n', 'tags': '', 'url': 'About.html'}, {'title': 'cmsimde', 'text': "SMap  - SiteMap - 依照階次列出網站的所有頁面. \n EditA  - Edit All page - 將所有頁面放入編輯模式中, 主要用來處理頁面搬遷, 刪除或決定衝突頁面內容版本. \n Edit  - Edit page - 先選擇要編輯的單一頁面後, 再點選 Edit, 即可進入單一頁面的編輯模式. \n Config  - Configure Site - 編輯頁面標題與管理者密碼. \n Search  - 動態頁面內容的關鍵字搜尋. \n IUpload  - Image file Upload - 圖檔的上傳功能, 可以上傳 jpg, png 與 gif 檔案, 其中若在手機上傳圖檔, 系統會自動將圖片檔案縮小為 800x800 大小. \n IList  - Image file List - 列出可以直接在頁面編輯模式中引用的圖片檔案. \n FUpload  - File Upload - 一般檔案的上傳功能, 目前可以上傳的檔案副檔名包括 'jpg', 'png', 'gif', '7z', 'pdf', 'zip', 'ttt', 'stl', 'txt', 'html', 'mp4' 等, 使用者可以自行修改. \n FList  - File List - 列出可以直接在頁面編輯模式中引用的上傳檔案. \n Logout  - 登出頁面編輯模式. \n Convert  - 將動態網站中位於 config/content.htm 檔案, 透過分頁設定轉為 content 目錄中的靜態網頁. \n acp  - git add, git commit 與 git push, 通常只有在 localhost 或自架主機上利用網頁表單協助將倉儲改版內容推向 Github 倉儲. \n SStatic  - Start Static Site - 利用 Python 啟動網站伺服功能, 可以讓使用者檢查轉檔後的靜態網站內容. \n RStatic  - Replit Static Site URL - 僅用於 Replit 模式, 當使用者按下 SStatic 後, 可以按下 RStatic 進入當下尚未推向 Github Pages 的靜態網站. \n 80  - 由 init.py 中 static_port 所決定的連結字串, 一般不使用 80, 只有在 Replit 中為了與動態網站共用 port, 才特別設為 80. \n \n", 'tags': '', 'url': 'cmsimde.html'}, {'title': 'Replit', 'text': 'https://replit.com \n 利用 init_replit 指令安裝所需 Python 模組 chmod u+x init_replit ./init_replit \n On Replit: \n .replit: python3 main.py \n chmod u+x cms init_replit \n ./init_replit \n for cmsimde_site (not needed): git submodule update --init --recursive \n for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent \n password generator:\xa0 https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py \xa0 \n \n for IPv6 only Ubuntu: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.com ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p for Replit: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.co #since Replit works for IPv4, therefore no ProxyCommand setting needed #ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p \n \n \n', 'tags': '', 'url': 'Replit.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};