<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>網際內容管理系統</title><link href="./" rel="alternate"></link><link href="./feeds/all.atom.xml" rel="self"></link><id>./</id><updated>2024-06-20T02:45:50+08:00</updated><entry><title>2024 w10 課程整理</title><link href="./2024-Spring-w10-blog-tutorial.html" rel="alternate"></link><published>2024-03-28T10:00:00+08:00</published><updated>2024-06-20T02:37:36+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-03-28:./2024-Spring-w10-blog-tutorial.html</id><summary type="html">&lt;p&gt;心得整理&lt;/p&gt;
</summary><content type="html">&lt;p&gt;心得整理&lt;/p&gt;

&lt;h1&gt;心得整理&lt;/h1&gt;
&lt;p&gt;以replit來維護新的分組倉儲，需要應對問題為replit的.shh協定無法供免費使用者使用，已經透過github系統設定，現在可以直接在replit進行分組維護，&lt;/p&gt;
&lt;p&gt;replit目前只剩下對於使用者的總資料儲存量(10G)限制，當資源存取超過上限時，需要回到github下的對應倉儲帳號進行對應手段。&lt;/p&gt;
&lt;p&gt;新的分組專案網站：https://github.com/mdewcm2024/1astud-site&lt;/p&gt;
&lt;p&gt;(需在teams留言字串進行加入)&lt;/p&gt;</content><category term="w10"></category><category term="網誌編寫"></category><category term="pelican"></category></entry><entry><title>2024 w11 課程整理</title><link href="./2024-Spring-w11-blog-tutorial.html" rel="alternate"></link><published>2024-03-28T10:00:00+08:00</published><updated>2024-06-20T02:43:46+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-03-28:./2024-Spring-w11-blog-tutorial.html</id><summary type="html">&lt;p&gt;心得整理&lt;/p&gt;
</summary><content type="html">&lt;p&gt;心得整理&lt;/p&gt;

&lt;h1&gt;心得整理&lt;/h1&gt;
&lt;p&gt;所有學員需將分組的小組組別名稱(g4)新增至評分網站中的，為置於專案目錄下，之後將每位學員的關於本課程內容心得，新增至各組別下的目錄。&lt;/p&gt;
&lt;p&gt;這個過程中的困難點就是當多人在同時上傳(push)時，我們要如何應對。&lt;/p&gt;
&lt;p&gt;慢慢等人上傳後自己再上傳顯然是不合效率，所以需以課程所學來應對衝突問題。&lt;/p&gt;
&lt;p&gt;這裡就是需要利用分支處理衝突問題，雖然在上傳時如果當下自己的版本不是最新的，一樣需要將最新的版本git pull下來，然後進入動態網站進行衝突/合併，解決完後才能夠git push上去。&lt;/p&gt;
&lt;p&gt;分支：就是在當下的版本的另一條屬於自己的版本，比如說是原本一條的河流，突然變成兩條(甚至以上)，他們在本質上是屬於同一支源流，但每個分支出來會呈現的形式都是不同，最終都會匯聚至大海，而大海就是我們衝突裡的主流，每個人在自己的分支裡做自己想做的，最後要統整合併為一個主流，將每次上傳時都可能遇到的處理衝突問題次數降低。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;1.開始複習加深前幾周所教學內容&lt;/p&gt;
&lt;p&gt;2.評分網站在git pull處理要點&lt;/p&gt;
&lt;p&gt;如果自己不是最新版本，在pull後內容會顯示新增 修改的內容&lt;/p&gt;
&lt;p&gt;WSGIserver(Web Server Gateway Interface)：具有高效、易於使用和可擴展性等特點，是 Python 中用於定義 Web 應用程序與 Web 服務器之間通信的標準界面。(參考)&lt;/p&gt;
&lt;p&gt;3.導師心得評語，修改評分網站中個人心得&lt;/p&gt;
&lt;p&gt;4.提到學校網站利用php(PHP: Hypertext Preprocessor)所編寫，提到課程內容進階的關於學校網站排課系統&lt;/p&gt;
&lt;p&gt;5.安裝Claude，AI程式聊天&lt;/p&gt;
&lt;p&gt;這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (practice_html.txt 動態頁面超文件).&lt;/p&gt;
&lt;p&gt;practice_html.txt 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.&lt;/p&gt;
&lt;p&gt;亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 class 後, 在範例導入時透過 instance 引用.&lt;/p&gt;</content><category term="w11"></category><category term="網誌編寫"></category><category term="pelican"></category></entry><entry><title>2024 w13 課程整理</title><link href="./2024-Spring-w13-blog-tutorial.html" rel="alternate"></link><published>2024-03-28T10:00:00+08:00</published><updated>2024-06-20T02:45:50+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-03-28:./2024-Spring-w13-blog-tutorial.html</id><summary type="html">&lt;p&gt;心得整理&lt;/p&gt;
</summary><content type="html">&lt;p&gt;心得整理&lt;/p&gt;

&lt;h1&gt;心得整理&lt;/h1&gt;
&lt;p&gt;1.從教務處主機直接擷取資料&lt;/p&gt;
&lt;p&gt;2.將擷取下來的資料以近端形式持續保留在頁面&lt;/p&gt;
&lt;p&gt;3.猜數字遊戲&lt;/p&gt;</content><category term="w13"></category><category term="網誌編寫"></category><category term="pelican"></category></entry><entry><title>2024 w6 課程整理</title><link href="./2024-Spring-w6-blog-tutorial.html" rel="alternate"></link><published>2024-03-28T10:00:00+08:00</published><updated>2024-06-20T02:26:22+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-03-28:./2024-Spring-w6-blog-tutorial.html</id><summary type="html">&lt;p&gt;與 ChatGPT 的對話&lt;/p&gt;
</summary><content type="html">&lt;p&gt;與 ChatGPT 的對話&lt;/p&gt;

&lt;h1&gt;與 ChatGPT 的對話, 了解有關 git 在不同專業領域的應用方法&lt;/h1&gt;
&lt;p&gt;1.根據自己專業：&lt;/p&gt;
&lt;p&gt;1-1.)說明git的使用和與ChatGPT的對話&lt;/p&gt;
&lt;p&gt;1-2.)內容需含git發展歷史&lt;/p&gt;
&lt;p&gt;1-3.)創作人的履歷&lt;/p&gt;
&lt;p&gt;1-4.)一般相同專業人士如何利用git解決內容管理問題？&lt;/p&gt;
&lt;p&gt;2.如果想在Windows實際使用demo git client與git server，該如何進行？&lt;/p&gt;
&lt;p&gt;3.練習git init到git push，個人自己建立倉儲分支環境練習上傳推送，並處理合併問題。&lt;/p&gt;
&lt;h1&gt;Git 歷史與希望解決的問題&lt;/h1&gt;
&lt;p&gt;問題: 請簡述一下 Git 的發展歷史, 以及當時的背景如何? Git 想要解決甚麼問題?&lt;/p&gt;
&lt;p&gt;ChatGPT 回答:&lt;/p&gt;
&lt;p&gt;Git 是由 Linus Torvalds 在 2005 年開始開發的分散式版本控制系統。在此之前，像 CVS 和 Subversion 等集中式版本控制系統存在著一些問題，比如需要與中央存儲庫保持連接、分支和合併操作複雜等。在 Linux 核心程式開發過程中，Torvalds 和其他開發者開始感受到集中式版本控制系統的種種限制和不便，這促使他開始開發一個更適合分散式開發的工具。&lt;/p&gt;
&lt;p&gt;Git 的目標是解決集中式版本控制系統的一些瓶頸，包括：&lt;/p&gt;
&lt;p&gt;性能問題：集中式版本控制系統在大型專案中操作效率低，尤其是在提交和合併時。
分支和合併操作的複雜性：在集中式系統中，分支和合併操作可能會變得耗時且複雜，過程中容易出現錯誤。
依賴中央存儲庫：集中式系統需要即時與資料伺服器連線，一旦斷線或伺服器故障，可能會導致開發過程中的中斷。
在這些問題的背後，是軟體開發過程的變化和複雜性增加。隨著項目變得越來越大，開發團隊變得分散，需要更靈活和高效率的工具來管理代碼。Git 的分散式架構允許開發人員在沒有連接到中央伺服器的情況下進行本地端操作，並且提供了高效的分支和合併機制，從而更有效滿足了協同需求。&lt;/p&gt;
&lt;p&gt;因此，Git 的發展是在不斷變化和擴大的軟體開發生態系統中的一個自然回應，旨在解決集中式版本控制系統所遇到的種種挑戰，並為開發人員提供更好的工具和流程。&lt;/p&gt;
&lt;p&gt;再問: 集中式版本控制系統為何在提交與合併上有性能問題?&lt;/p&gt;
&lt;p&gt;ChatGPT 回答:&lt;/p&gt;
&lt;p&gt;集中式版本控制系統在提交和合併上可能會遇到性能問題，主要是由於以下幾個原因：&lt;/p&gt;
&lt;p&gt;單一伺服器負載：在集中式版本控制系統中，所有的提交和合併操作都需要與中央伺服器進行連線。當開發人員數量增加，或者在大型項目中進行大量提交和合併操作時，這個中央伺服器可能會成為性能瓶頸，導致提交和合併操作的速度變慢。&lt;/p&gt;
&lt;p&gt;網路延遲：因為提交和合併操作需要與中央伺服器進行連線，因此網路延遲也會影響操作的速度。特別是當開發人員分佈在不同的地理位置時，距離和網路品質都可能擴大延遲。&lt;/p&gt;
&lt;p&gt;資料傳輸量：提交和合併操作可能涉及大量的資料傳輸，尤其是當提交或合併的檔案很大或者進行多次修改時。這些大量的資料傳輸需要消耗時間與頻寬，進一步影響操作的性能。&lt;/p&gt;
&lt;p&gt;鎖定操作：有些集中式版本控制系統在提交和合併時可能會對文件或資料夾進行鎖定，以避免同時進行衝突的操作。這種鎖定操作可能會導致等待時間增加，特別是在多人同時進行操作的情況下。&lt;/p&gt;
&lt;p&gt;因此，集中式版本控制系統的性能問題主要是由於其架構設計所導致，即所有操作都必須通過中央伺服器進行。因而限制了系統的擴展性和彈性，特別是在大型或分散式團隊中。&lt;/p&gt;
&lt;p&gt;再問: 為何使用 Git 沒有單一伺服器負載問題?&lt;/p&gt;
&lt;p&gt;ChatGPT 回答:&lt;/p&gt;
&lt;p&gt;使用 Git 沒有單一伺服器負載問題的主要原因是 Git 的分散式架構。在 Git 中，每一位開發人員都擁有一個完整的本地儲存庫（repository），這使得提交和合併操作不需要依賴於單一的中央伺服器。如此一來，就不會出現單一伺服器負載問題。&lt;/p&gt;
&lt;p&gt;換言之，當開發人員在本地進行提交時，各協同人員只需將變更提交到自己的本地儲存庫中，而不是向中央伺服器提交。使得提交操作的速度不再受到中央伺服器的限制，而是受到本地計算機的性能限制，一般情況下會比提交到單一伺服器的執行速度快上許多。&lt;/p&gt;
&lt;p&gt;當需要與其他開發人員共享變更時，Git 提供了分支和合併的機制，開發人員可以在本地進行分支和合併操作，而不需要直接與中央伺服器連線。使得提交和合併操作可以在本地進行，不受網路延遲和頻寬限制，從而更加快速並提高協同效率。&lt;/p&gt;
&lt;p&gt;另外，即使在多人協作的情況下，由於每個開發人員都有自己的本地儲存庫，這些操作可以同步進行，而不會互相干擾或造成壓力集中在單一伺服器上。&lt;/p&gt;
&lt;p&gt;因此，Git 的分散式架構使得提交和合併操作不再依賴於單一的中央伺服器，從而消除了單一伺服器負載問題，提高了系統的性能與彈性。&lt;/p&gt;
&lt;h1&gt;Git 如何解決產品設計問題&lt;/h1&gt;
&lt;p&gt;問題: 身為產品開發人員, 使用的是商用封閉的 CAD 套件, 該如何使用 Git 來提升工作效率?&lt;/p&gt;
&lt;p&gt;ChatGPT 回答:&lt;/p&gt;
&lt;p&gt;即使使用商用封閉的 CAD 套件，仍然可以使用 Git 來提升工作效率。以下是一些使用 Git 的方式：&lt;/p&gt;
&lt;p&gt;版本控制: 使用 Git 對 CAD 項目進行版本控制，可以跟蹤每個版本的變更，並輕鬆地回溯到先前的版本。這對於保留歷史記錄、管理修改和恢復意外更改非常有用。&lt;/p&gt;
&lt;p&gt;分支管理: 在 Git 中使用分支來進行不同功能或版本的開發。你可以在不同的分支上同時進行不同的實驗和開發工作，而不會影響主要版本的開發。&lt;/p&gt;
&lt;p&gt;協作與共享: 透過 Git，團隊成員可以輕鬆地共享各自的工作成果，進行協作開發。每個人可以在自己的分支上工作，然後通過合併請求（pull request）將修改合併到主分支中。&lt;/p&gt;
&lt;p&gt;程式審查: 利用 Git 的分支和合併功能進行程式審查。團隊成員可以在專門的分支上提交各自編寫的程式變更，然後其他成員可以查看這些變更，提供意見和建議，最終通過合併到主分支中。&lt;/p&gt;
&lt;p&gt;自動化流程: 使用 Git 配合持續集成（CI）和持續部署（CD）工具，自動化 CAD 項目的測試、構建和部署流程。這樣可以節省時間並降低錯誤，同時確保項目的品質和穩定性。&lt;/p&gt;
&lt;p&gt;文檔和問題追蹤: 將 CAD 專案的文檔和問題追蹤整合到 Git 庫中，以便於跟蹤和管理。例如: 可以使用 Git 提供的 Wiki 功能來撰寫文檔，並使用 Issue 跟蹤功能來追蹤問題和任務。&lt;/p&gt;
&lt;p&gt;因此，即使使用商用封閉的 CAD 套件，Git 仍然可以成為提升工作效率的強大工具，幫助團隊更好地協作、管理和追蹤 CAD 開發專案。&lt;/p&gt;
&lt;p&gt;再問: 可是商用 CAD 採用 binary 格式的零件檔案, 在協同產品設計流程中, 該如何使用 Git 提升協同效能?&lt;/p&gt;
&lt;p&gt;ChatGPT 回答:&lt;/p&gt;
&lt;p&gt;即使 CAD 文件是以 binary 格式保存的，你仍然可以使用 Git 來提升協同效能。以下是一些方法：&lt;/p&gt;
&lt;p&gt;使用 LFS（Large File Storage）: Git LFS 是一個 Git 擴增模組，專門用於管理大型文件，包括 CAD 文件等二進制文件。透過 Git LFS，可以將大型 CAD 文件存儲在單獨的存儲庫中，而不會將它們放在 Git 存儲庫中，從而減少存儲庫大小和傳輸時間。&lt;/p&gt;
&lt;p&gt;拆分項目: 將 CAD 項目拆分為更小的部分，每個部分都是可獨立開發和測試的。這樣可以降低對於 binary 文件的變更衝突，並使得協同開發更加順暢。&lt;/p&gt;
&lt;p&gt;定期同步: 要求團隊成員定期將他們的工作同步到 Git 存儲庫中，以便及時發現和解決衝突。透過定期同步，可以最大程度地減少衝突和重複工作。&lt;/p&gt;
&lt;p&gt;使用分支: 在 Git 中使用分支來進行不同功能或版本的開發。每個團隊成員可以在自己的分支上工作，而不會影響主要的生產環境。這樣可以提高彈性，同時減少對於 binary 文件的同時修改。&lt;/p&gt;
&lt;p&gt;程式審查: 使用 Git 的分支和合併功能進行程式審查。每個成員在完成工作後，可以提交程式變更到自己的分支，然後發起合併請求。其他成員可以查看這些變更，提供意見和建議，確保程式的品質和穩定性。&lt;/p&gt;
&lt;p&gt;文件管理: 使用 Git 存儲庫中的 Wiki 功能來管理 CAD 文件的相關文檔，包括設計文檔、變更日誌等。這樣可以使得團隊成員更容易地找到並理解 CAD 文件的相關訊息。&lt;/p&gt;
&lt;p&gt;因此，即使 CAD 文件是以 binary 格式保存的，仍然可以通過合理使用 Git 和相應的工具來提升協同效能，降低衝突和重複工作，從而更加高效地進行協同產品設計流程。&lt;/p&gt;
&lt;p&gt;再問: 若設計流程採用 Siemens NX 設計零組件, 若將每一個零組件的設計過程採 NXOpen Python 程式存檔, 並且透過設計參數進行零組件調控, 就採用 Git 分散式版本管理系統上, 會比直接使用 binary 格式更有效率嗎?&lt;/p&gt;
&lt;p&gt;ChatGPT 回答:&lt;/p&gt;
&lt;p&gt;在將每個零組件的設計過程以 NXOpen Python 程式存檔的情況下，使用 Git 分散式版本管理系統相比直接使用 binary 格式可能會更有效率。這主要是因為：&lt;/p&gt;
&lt;p&gt;可讀性和可比較性：使用 NXOpen Python 程式存檔可以使得零組件的設計過程更具有可讀性和可比較性。相比於 binary 格式，Python 程式碼可以被版本控制系統更好地管理，使得團隊成員可以更容易地查看、比較和理解每個零組件的設計過程。&lt;/p&gt;
&lt;p&gt;易於跟蹤和管理：Python 程式存檔可以更輕鬆地跟蹤和管理設計過程中的變更。Git 可以記錄每次提交的修改，包括添加、刪除和修改的程式碼行數，從而使得團隊可以清楚地了解每個零組件的設計歷史和演變過程。&lt;/p&gt;
&lt;p&gt;設計參數的調控：使用 Python 程式存檔可以更靈活地調控零組件的設計參數。可以使用程式碼來自動化設計過程，並且通過修改參數來調整零組件的性能和外觀，從而更有效地進行重複性流程設計以及最佳化。&lt;/p&gt;
&lt;p&gt;協同開發與程式審查：與 binary 格式相比，Python 程式存檔更適合進行協同開發與程式碼的審查。團隊成員可以在版本控制系統中查看並評論每個零組件的設計程式碼，提供意見和建議，從而確保設計的品質和一致性。&lt;/p&gt;
&lt;p&gt;因此，使用 NXOpen Python 程式存檔並結合 Git 分散式版本管理系統可以更有效地管理和控制零組件的設計過程，提高團隊的協同效率和設計品質。&lt;/p&gt;</content><category term="w6"></category><category term="網誌編寫"></category><category term="pelican"></category></entry><entry><title>2024 w7 課程整理</title><link href="./2024-Spring-w7-blog-tutorial.html" rel="alternate"></link><published>2024-03-28T10:00:00+08:00</published><updated>2024-06-20T02:24:34+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-03-28:./2024-Spring-w7-blog-tutorial.html</id><summary type="html">&lt;p&gt;心得整理&lt;/p&gt;
</summary><content type="html">&lt;p&gt;心得整理&lt;/p&gt;


&lt;h1&gt;心得整理&lt;/h1&gt;
&lt;p&gt;影片嵌入網站方法。&lt;/p&gt;
&lt;p&gt;以超連結配合個人網站內的Source code 將影片複製後的超連結貼上，連結內有預設影片邊界 來源拉取等，除非想有特別需要調整，一般基本只要將其貼上即可。&lt;/p&gt;</content><category term="w7"></category><category term="網誌編寫"></category><category term="pelican"></category></entry><entry><title>2024 w8 課程整理</title><link href="./2024-Spring-w8-blog-tutorial.html" rel="alternate"></link><published>2024-03-28T10:00:00+08:00</published><updated>2024-06-20T02:29:57+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-03-28:./2024-Spring-w8-blog-tutorial.html</id><summary type="html">&lt;p&gt;從教育的本質看網際內容管理&lt;/p&gt;
</summary><content type="html">&lt;p&gt;從教育的本質看網際內容管理&lt;/p&gt;


&lt;h1&gt;從教育的本質看課程內容&lt;/h1&gt;
&lt;p&gt;問chatgpt:請問甚麼是教育的本質?&lt;/p&gt;
&lt;p&gt;答:&lt;/p&gt;
&lt;p&gt;教育的本質是一個多層面的概念，涉及到知識、價值觀、技能和社會化等多個方面。總的來說，教育的本質是通過各種形式的學習和指導來促進個人的全面發展和成長。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;知識的傳遞與掌握：&lt;/strong&gt; 教育旨在將知識傳授給學生，使他們能夠理解和應用這些知識。這包括學習語言、數學、科學、歷史、文化等學科知識。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;價值觀的塑造：&lt;/strong&gt; 教育也扮演著塑造個人價值觀和道德觀念的重要角色。通過教育，人們學習社會準則、尊重他人、責任感等價值觀。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;技能的培養：&lt;/strong&gt; 教育提供了學習和發展各種技能的機會，包括認知技能（如思考、分析、解決問題）、社交技能（如合作、溝通）、實踐技能（如手工藝、運動）等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;社會化和個人成長：&lt;/strong&gt; 教育不僅僅是在學校或課堂上進行的，它還涉及到社會環境中的各種學習和互動。通過與他人的交流和合作，個人在社會化過程中成長，學會適應和融入社會。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;總的來說，教育的本質是通過知識、價值觀、技能和社會化的綜合作用，幫助個人實現全面的成長和發展，從而更好地適應和貢獻於社會。&lt;/p&gt;
&lt;p&gt;問:那對大學教育的本質呢?&lt;/p&gt;
&lt;p&gt;答:&lt;/p&gt;
&lt;p&gt;大學教育的本質在某種程度上延續了教育的一般本質，但也有其特定的特點和目標。以下是大學教育的本質：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;知識的深度和廣度：&lt;/strong&gt; 大學教育旨在提供更深入和更廣泛的學術知識，並培養學生的批判性思維和問題解決能力。這包括專業知識、學科理論、研究方法等方面的學習。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;專業技能的培養：&lt;/strong&gt; 大學教育不僅關注學科知識，還強調培養學生在特定領域的專業技能。這些技能可能包括研究能力、創新能力、溝通能力、領導能力等，這些能力對於學生未來的職業發展至關重要。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;思想和價值觀的塑造：&lt;/strong&gt; 大學教育也致力於塑造學生的思想、價值觀和道德觀念。通過學術研究、社會實踐和校園文化等活動，大學教育有助於學生形成獨立思考、社會責任感和多元文化意識。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;學術自由和創新：&lt;/strong&gt; 大學教育強調學術自由和創新，鼓勵學生探索新的思想和理論，開展獨立研究，並在學術領域做出貢獻。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;生涯規劃和職業發展：&lt;/strong&gt; 大學教育不僅僅是為了知識和技能的獲取，還包括幫助學生進行生涯規劃和職業發展。大學通常提供職業指導、實習機會和就業服務，以幫助學生順利過渡到職業生涯。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;總的來說，大學教育的本質是提供高等教育，通過深入的學術研究和專業培訓，培養學生的學術能力、專業素養和社會責任感，以滿足他們在學術、職業和社會生活中的需求。&lt;/p&gt;</content><category term="w8"></category><category term="網誌編寫"></category><category term="pelican"></category></entry><entry><title>2024 w9 課程整理</title><link href="./2024-Spring-w9-blog-tutorial.html" rel="alternate"></link><published>2024-03-28T10:00:00+08:00</published><updated>2024-06-20T02:34:21+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-03-28:./2024-Spring-w9-blog-tutorial.html</id><summary type="html">&lt;p&gt;心得整理&lt;/p&gt;
</summary><content type="html">&lt;p&gt;心得整理&lt;/p&gt;


&lt;h1&gt;w9心得整理&lt;/h1&gt;
&lt;p&gt;最近我開始意識到，人工智慧（AI）工具已經深深地融入了我的生活，不僅提高了我的效率，還幫助我解決了許多問題。&lt;/p&gt;
&lt;p&gt;首先，AI工具在提高效率方面給我帶來了明顯的好處。比如，我經常使用智能手機上的智能助手來提醒我行程、查詢資訊，甚至解答我各種疑問。這幫助我節省了大量的時間，讓我更加專注於工作和生活中更重要的事情上。&lt;/p&gt;
&lt;p&gt;其次，AI工具也在解決問題方面給了我很大的幫助。最明顯的例子就是在學習和工作中。我經常使用自然語言處理（NLP）工具來幫助我理解複雜的文章或文獻，進行快速的信息查詢和摘要生成。這大大提高了我的學習效率，幫助我更好地應對工作中的挑戰。&lt;/p&gt;
&lt;p&gt;此外，AI工具還在許多其他方面給了我幫助。比如，在健康方面，我通過智能手環上的健康監測功能來記錄我的運動情況和睡眠狀態，幫助我更好地管理我的身體健康。在旅行方面，我通常使用智能導航應用來規劃路線和尋找景點，讓我的旅行更加順利和愉快。&lt;/p&gt;
&lt;p&gt;總的來說，AI工具已經成為我生活中不可或缺的一部分，從提高效率到解決問題，它們為我帶來了許多便利和好處。我相信隨著技術的不斷發展和進步，AI工具將會在未來帶給我們更多的驚喜和改變。&lt;/p&gt;
&lt;p&gt;在了解什麼是AI的過程當中，我查到了AI較類似背後有一個大型數據庫，每分每秒都在自我學習、自我提升所以只要我們丟問題給AI，只要是在他的資料庫裡的，他都能夠回答得出來，所以我認為我也要向AI學習，自我成長、自我提升。&lt;/p&gt;</content><category term="w9"></category><category term="網誌編寫"></category><category term="pelican"></category></entry><entry><title>2024 w5 課程整理</title><link href="./2024-Spring-w5-blog-tutorial.html" rel="alternate"></link><published>2024-03-21T10:00:00+08:00</published><updated>2024-06-20T02:02:26+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-03-21:./2024-Spring-w5-blog-tutorial.html</id><summary type="html">&lt;p&gt;Replit分組平台倉儲設定&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Replit分組平台倉儲設定&lt;/p&gt;

&lt;h1&gt;本周心得記錄&lt;/h1&gt;
&lt;p&gt;事先預習上課可能會講解內容，了解iframe是什麼和相關應用。&lt;/p&gt;
&lt;p&gt;內容會以iframe來插入前幾周的教學影片，並摘要各影片內容。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;1.Replit分組平台倉儲設定。&lt;/p&gt;
&lt;p&gt;2.使用可攜檔裡的Putty-solvespace.exe(STL)，零件檢視方法。&lt;/p&gt;
&lt;p&gt;3.使用近端可攜程式，維護更新自己及分組倉儲。&lt;/p&gt;
&lt;p&gt;參考實作教學影片請到youtube&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.tsg.com.tw/blog-detail4-324-0-iframe.htm"&gt;iframe&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://nfuedu-my.sharepoint.com/personal/41223118_nfu_edu_tw/_layouts/15/onedrive.aspx?id=%2Fpersonal%2F41223118%5Fnfu%5Fedu%5Ftw%2FDocuments%2Fportable%5F2024%2E7z&amp;amp;parent=%2Fpersonal%2F41223118%5Fnfu%5Fedu%5Ftw%2FDocuments&amp;amp;ga=1"&gt;可攜檔&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.adobe.com/hk_zh/creativecloud/file-types/image/vector/stl-file.html#%E4%BB%80%E9%BA%BC%E6%98%AF-stl-%E6%AA%94%E6%A1%88"&gt;STL&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/@-kmolab9376"&gt;youtube&lt;/a&gt;&lt;/p&gt;</content><category term="w5"></category><category term="網誌編寫"></category><category term="pelican"></category></entry><entry><title>2024 w4 課程整理</title><link href="./2024-Spring-w4-blog-tutorial.html" rel="alternate"></link><published>2024-03-14T10:00:00+08:00</published><updated>2024-06-15T13:04:44+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-03-14:./2024-Spring-w4-blog-tutorial.html</id><summary type="html">&lt;p&gt;Replit靜態&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Replit靜態&lt;/p&gt;


&lt;h1&gt;本週整理心得&lt;/h1&gt;
&lt;p&gt;我最近打造了自己的個人網站，想分享一下我的心得。首先，我用了GitHub倉儲管理網站內容，這樣就能隨時追蹤內容的改版歷程，也方便與團隊合作。然後，我利用GitHub Pages建立了網站，這樣我就無需擔心伺服器問題，網站能自動更新。為了更輕鬆編輯內容，我開發了一個網頁編輯系統，讓我能快速編輯和管理網站內容。最後，我將網站的啟動網址設置為外部IP，這樣無論身在何處，都能輕鬆編輯我的網站。總的來說，這次打造網站的過程讓我更了解了網站開發，也提高了效率，希望能繼續完善我的網站，分享更多有價值的內容。&lt;/p&gt;
&lt;h1&gt;Replit靜態網站檢視&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://nfuedu-my.sharepoint.com/:t:/g/personal/41223150_nfu_edu_tw/EQz_rJy5IehHobcAsJ9hJ98BWJ40_QKGFVd--Tl3gZEnNQ?e=Nbc2JI"&gt;main2.txt&lt;/a&gt; &lt;/p&gt;</content><category term="w4"></category><category term="網誌編寫"></category><category term="pelican"></category></entry><entry><title>2024 w3 課程整理</title><link href="./2024-Spring-w3-blog-tutorial.html" rel="alternate"></link><published>2024-03-07T10:00:00+08:00</published><updated>2024-06-20T02:09:55+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-03-07:./2024-Spring-w3-blog-tutorial.html</id><summary type="html">&lt;p&gt;Replit, Github Codespaces, Gitpod 如何利用可攜系統維護個人與分組網站&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Replit, Github Codespaces, Gitpod 如何利用可攜系統維護個人與分組網站&lt;/p&gt;


&lt;h1&gt;利用 Github Classroom 分組&lt;/h1&gt;
&lt;p&gt;在WCM第三週教學內容，整理重點。(都有放相關或參照連結)&lt;/p&gt;
&lt;p&gt;1.關於git常用指。&lt;/p&gt;
&lt;p&gt;2.利用Wink建立操作影片。(安裝下載檔)&lt;/p&gt;
&lt;p&gt;3.如何使用submoduie來創建個人子模組。(導師操作觀念影片)&lt;/p&gt;
&lt;p&gt;4.說明如何使用replit維護網站。&lt;/p&gt;</content><category term="w3"></category><category term="網誌編寫"></category><category term="pelican"></category></entry><entry><title>2024 w2 課程整理</title><link href="./2024-Spring-w2-blog-tutorial.html" rel="alternate"></link><published>2024-02-29T10:00:00+08:00</published><updated>2024-06-15T12:43:51+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-02-29:./2024-Spring-w2-blog-tutorial.html</id><summary type="html">&lt;p&gt;replit介紹及操作&lt;/p&gt;
</summary><content type="html">&lt;p&gt;replit介紹及操作&lt;/p&gt;


&lt;h1&gt;replit&lt;/h1&gt;</content><category term="w2"></category><category term="網誌編寫"></category><category term="pelican"></category></entry><entry><title>2024 Spring 課程</title><link href="./2024-Spring-w1-blog-tutorial.html" rel="alternate"></link><published>2024-02-18T11:00:00+08:00</published><updated>2024-06-15T12:37:03+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-02-18:./2024-Spring-w1-blog-tutorial.html</id><summary type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;


&lt;h1&gt;內容管理系統1&lt;/h1&gt;
&lt;p&gt;使用者可以自行利用 &lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;cmsimde_site&lt;/a&gt; 倉儲作為 Template, 建立自己的網站內容管理系統.&lt;/p&gt;
&lt;p&gt;引用網站網址連結的方法:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;cmsimde_site&lt;/a&gt; - 在文章中多次引用同一個網站連結時, 可以使用此種方法.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;https://github.com/mdecycu/cmsimde_site&lt;/a&gt; - 假如想要快速將網址套用 html 網站連結, 可以使用此種方法.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;cmsimde_site&lt;/a&gt; - 也可以使用 Markdown 的標準網站連結使用格式.&lt;/p&gt;
&lt;pre class="brush: python"&gt;
# 引用 Python 程式的方法
for i in range(10):
    print(i, "列出字串")
&lt;/pre&gt;

&lt;p&gt;也可以直接在 .md 檔案中使用 html 標註, 或加入 Javascript 或 Brython 程式碼.&lt;/p&gt;
&lt;p&gt;從 1 累加到 100:&lt;/p&gt;
&lt;p&gt;&lt;button id="add1to100"&gt;1 add to 100&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;將 iterable 與 iterator &lt;a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438"&gt;相關說明&lt;/a&gt;, 利用 Brython 與 Ace Editor 整理在這個頁面.&lt;/p&gt;
&lt;!-- 導入 brython 程式庫 --&gt;
&lt;p&gt;
&lt;script src="./../cmsimde/static/brython.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/brython_stdlib.js"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;!-- 啟動 Brython --&gt;
&lt;p&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 導入 FileSaver 與 filereader --&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script src="./../cmsimde/static/ace/FileSaver.min.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/filereader.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 導入 ace --&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script src="./../cmsimde/static/ace/ace.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/ext-language_tools.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/mode-python3.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/snippets/python.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 --&gt;
&lt;script src="./../cmsimde/static/Cango-24v03-min.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/gearUtils-09.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/SVGpathUtils-6v03-min.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/sylvester.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/PrairieDraw.js"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script type="text/javascript"&gt;
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 開始 --&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 結束--&gt;&lt;/p&gt;
&lt;!-- editor1 開始 --&gt;
&lt;p&gt;&lt;!-- 用來顯示程式碼的 editor 區域 --&gt;&lt;/p&gt;
&lt;div id="kw_editor1" style="width: 600px; height: 300px;"&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 存擋表單開始 --&gt;&lt;/p&gt;
&lt;form&gt;&lt;label&gt;Filename: &lt;input id="kw_filename" placeholder="input file name" type="text"/&gt;.py&lt;/label&gt; &lt;input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/&gt;&lt;/form&gt;
&lt;p&gt;&lt;!-- 存擋表單結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕開始 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;button id="kw_run1"&gt;Run&lt;/button&gt; &lt;button id="kw_show_console1"&gt;Output&lt;/button&gt; &lt;button id="kw_clear_console1"&gt;清除輸出區&lt;/button&gt;&lt;button id="clear_bd1"&gt;清除繪圖區&lt;/button&gt;&lt;button onclick="window.location.reload()"&gt;Reload&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 程式執行 ouput 區 --&gt;&lt;/p&gt;
&lt;div style="width: 100%; height: 100%;"&gt;&lt;textarea autocomplete="off" id="kw_console1"&gt;&lt;/textarea&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --&gt;&lt;/p&gt;
&lt;div id="brython_div1"&gt;&lt;/div&gt;
&lt;!-- editor1 結束 --&gt;
&lt;hr/&gt;&lt;!-- ########################################## --&gt;&lt;p&gt;從 1 累加到 100 part2:&lt;/p&gt;
&lt;p&gt;&lt;button id="add1to100part2"&gt;1 add to 100&lt;/button&gt;&lt;button id="cango_three_gears"&gt;cango_three_gears&lt;/button&gt;&lt;button id="bsnake"&gt;BSnake&lt;/button&gt;&lt;button id="aitetris"&gt;AI Tetris&lt;/button&gt;&lt;button id="threejsblock"&gt;Rotating Block&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 part2 開始 --&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 part2 結束--&gt;&lt;/p&gt;
&lt;!-- editor2 開始 --&gt;
&lt;p&gt;&lt;!-- 用來顯示程式碼的 editor 區域 --&gt;&lt;/p&gt;
&lt;div id="kw_editor2" style="width: 600px; height: 300px;"&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 存擋表單開始 --&gt;&lt;/p&gt;
&lt;form&gt;&lt;label&gt;Filename: &lt;input id="kw_filename2" placeholder="input file name" type="text"/&gt;.py&lt;/label&gt; &lt;input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/&gt;&lt;/form&gt;
&lt;p&gt;&lt;!-- 存擋表單結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕開始 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;button id="kw_run2"&gt;Run&lt;/button&gt; &lt;button id="kw_show_console2"&gt;Output&lt;/button&gt; &lt;button id="kw_clear_console2"&gt;清除輸出區&lt;/button&gt;&lt;button id="clear_bd2"&gt;清除繪圖區&lt;/button&gt;&lt;button onclick="window.location.reload()"&gt;Reload&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 程式執行 ouput 區 --&gt;&lt;/p&gt;
&lt;div style="width: 100%; height: 100%;"&gt;&lt;textarea autocomplete="off" id="kw_console2"&gt;&lt;/textarea&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --&gt;&lt;/p&gt;
&lt;div id="brython_div2"&gt;&lt;/div&gt;
&lt;!-- editor2 結束 --&gt;
&lt;hr/&gt;&lt;p&gt;
&lt;script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"&gt;&lt;/script&gt;</content><category term="w1"></category><category term="網誌編寫"></category></entry></feed>